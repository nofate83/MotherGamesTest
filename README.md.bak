1. Реализовано управление игроком через WASD (Input System) и атака кнопками E (обычная атака) и F (двойная атака)
также атаки возможны через нажатия на кнопки в UI
1.1 Обычная атака наносит урон только одному врагу в радиусе attack range. 
1.2 Double attack наносит урон всем врагам в радиусе attack range
2. Основные анимации были продублированы для ухода от статуса read-only и для использования в них event'ов
Также изменил вызов анимации walk для избежания зацикливания.
3. Доработана основная архитектура. Организовано взаимодействие контроллеров на основе событийной модели, а не по статическим референсам.
Думал добавить DI, но так как проект тестовый и в задании такого пункта не было - не добавлял.
Название контроллера сцены изменено с SceneManager на SceneController для избежания путаницы с UnityEngine.SceneManagement.SceneManager
4. Решения LevelConfig и Wave не изменялись, так как решение не требует доработки.
5. Создан Пул, он же фабрика - не монобех, для добавления врагов на сцену. Цель - сокращение создания новых юнитов если в пуле
уже имеются инстанциированные. Если пул не может предоставить требуемого врага - происходит инстанциация. 
6. Добавлен интерфейс IEnemy для взаимодействия с разными типами врагов общими алгоритмамми контроллера сцены и пула.
6.1 Добавлена абстракция EnemyBase
7. Добавлено 2 типа новых врагов - GoblinDaddy и GoblinKid. При убийстве GoblinDaddy активируется анимация Particle System 
и появляются 2 GoblinKid
8. Добавлен UI Controller для обеспчение работы UI
В UI ведется список убитых, отображается текущая волна, кнопка рестарта и 2 кнопки - атака и двойная атака с радиальным отображением
кулдаунов. Обычная атака может совершаться даже если рядом нет врагов, двойная только если рядом есть враги, как было указано в требованиях
тестового задания

При необходимости могу прокоментировать код, но т.к. этого в задании не было - не описывал, хотя там и так по сути все вполне понятно.